import nodemailer from 'nodemailer';

console.log('üìß Konfiguracja SMTP:', {
  host: process.env.SMTP_HOST,
  port: process.env.SMTP_PORT,
  secure: process.env.SMTP_SECURE,
  user: process.env.SMTP_USER,
  hasPass: !!process.env.SMTP_PASS
});

const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,
  port: 465, // Sta≈Çy port dla SSL/TLS
  secure: true, // Wymagane dla portu 465
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
  },
  tls: {
    rejectUnauthorized: true // Wymagaj prawid≈Çowego certyfikatu SSL
  },
  debug: true,
  logger: true
});

export async function sendAdminNotification({
  orderType,
  companyName,
  orderId
}: {
  orderType: 'profile-removal' | 'review-removal';
  companyName: string;
  orderId: string;
}) {
  const adminEmail = 'kontakt@wizaro.pl'; // Sta≈Çy adres email

  const orderTypeText = orderType === 'profile-removal' ? 'usuniƒôcia profilu' : 'usuniƒôcia opinii';
  
  const mailOptions = {
    from: process.env.SMTP_FROM || process.env.SMTP_USER,
    to: adminEmail,
    subject: `‚ö° Nowe zam√≥wienie: ${orderTypeText} - ${companyName}`,
    html: `
      <h2>Nowe zam√≥wienie w systemie</h2>
      <p>Typ: <strong>${orderTypeText}</strong></p>
      <p>Firma: <strong>${companyName}</strong></p>
      <p>ID zam√≥wienia: <strong>${orderId}</strong></p>
      <p>Link do zam√≥wienia: <a href="${process.env.NEXT_PUBLIC_SITE_URL}/dashboard/orders/${orderId}">${process.env.NEXT_PUBLIC_SITE_URL}/dashboard/orders/${orderId}</a></p>
    `
  };
  try {
    console.log('üìß Pr√≥ba wys≈Çania powiadomienia:', {
      to: adminEmail,
      from: mailOptions.from,
      subject: mailOptions.subject,
      siteUrl: process.env.NEXT_PUBLIC_SITE_URL
    });

    // Weryfikacja po≈ÇƒÖczenia przed wys≈Çaniem
    try {
      await transporter.verify();
      console.log('‚úÖ Po≈ÇƒÖczenie SMTP zweryfikowane pomy≈õlnie');
    } catch (verifyError) {
      console.error('‚ùå B≈ÇƒÖd weryfikacji SMTP:', verifyError);
      throw verifyError;
    }

    const info = await transporter.sendMail(mailOptions);
    console.log('üìß Powiadomienie wys≈Çane:', {
      messageId: info.messageId,
      response: info.response,
      envelope: info.envelope
    });
    return info;
  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd wysy≈Çki powiadomienia:', error);
    throw error;
  }
}
